# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: front-end CICD

on:
  push:
    branches: [ "main", "dev" ]
  pull_request:
    branches: [ "main", "dev" ]

jobs:
  build:

    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
    - name: Checkout source code.  
      uses: actions/checkout@v4
      
    - name: Check Node v            # Node v 확인
      run: node -v
      
    - name: Install dependencies    # 의존 파일 설치
      run: npm install
    
    - name: Generate build          # React Build
      run: npm run build

      
    # Configure Gradle for optimal use in GitHub Actions, including caching of downloaded dependencies.
    # See: https://github.com/gradle/actions/blob/main/setup-gradle/README.md

    - name: Docker build
      run: |
        docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
        docker build --platform linux/amd64 -t app .
        docker tag app ${{ secrets.DOCKER_USERNAME }}/medo:latest
        docker push ${{ secrets.DOCKER_USERNAME }}/medo:latest

    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    - name: Deploy
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.EC2_HOST }} # EC2 인스턴스 탄력적 IP
        username: ubuntu
        key: ${{ secrets.EC2_SSH_PRIVATE_KEY }} # pem 키 삽입
        # 도커 작업
        script: |
          docker stop fe || true
          docker rm fe || true
          docker pull ${{ secrets.DOCKER_USERNAME }}/medo:latest
          docker run -d -p 3000:3000 --name fe ${{ secrets.DOCKER_USERNAME }}/medo:latest
          docker image prune -a -f

